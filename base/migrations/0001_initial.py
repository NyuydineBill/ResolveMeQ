# Generated by Django 5.2.2 on 2025-06-13 21:59

import base.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the user', primary_key=True, serialize=False)),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, help_text='Required. Enter a valid email address.', max_length=254, unique=True, verbose_name='email address')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.core.validators.RegexValidator(message='Enter a valid username. This value may contain only letters, numbers, and @/./+/-/_ characters.', regex='^[\\w.@+-]+$')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, help_text="User's first name", max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, help_text="User's last name", max_length=150, verbose_name='last name')),
                ('secure_code', models.CharField(blank=True, help_text='Auto-generated secure code for user verification', max_length=6, null=True, verbose_name='secure code')),
                ('secure_code_expiry', models.DateTimeField(blank=True, help_text='The date and time when the secure code expires', null=True, verbose_name='secure code expiry')),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether the user has verified their email address.', verbose_name='verified')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time when the user account was created', verbose_name='date joined')),
                ('last_login', models.DateTimeField(blank=True, help_text="The date and time of the user's last login", null=True, verbose_name='last login')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the user', primary_key=True, serialize=False, unique=True)),
                ('bio', models.TextField(blank=True, help_text='A brief biography or description of the user', null=True, verbose_name='About yourself')),
                ('profile_image', models.ImageField(blank=True, help_text='Upload a profile image (JPG, PNG, WebP). Max size: 5MB.', null=True, upload_to=base.models.profile_image_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'webp']), base.models.validate_image_size], verbose_name='profile image')),
                ('thumbnail', models.ImageField(blank=True, editable=False, null=True, upload_to=base.models.profile_image_path, verbose_name='thumbnail')),
                ('location', models.CharField(help_text='The location of the user, e.g., country or city', max_length=300, verbose_name='Location')),
                ('city', models.CharField(help_text='The city where the user resides', max_length=300, verbose_name='City')),
                ('user', models.OneToOneField(help_text='The user associated with this profile', on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='base_user_email_8a5bc6_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['secure_code'], name='base_user_secure__416ced_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active', 'is_staff'], name='base_user_is_acti_cbbc04_idx'),
        ),
    ]
